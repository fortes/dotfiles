# vim: ft=gitconfig

[alias]
  lg = log --graph --pretty=oneline --abbrev-commit --decorate
  lall = log --graph --pretty=oneline --abbrev-commit --decorate --all
  ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cgreen\\ [%cn]" --decorate
  ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cgreen\\ [%cn]" --decorate --numstat
  noedit = "commit -a --amend --no-edit"
  # Fetch and rebase
  frb = !git fetch --prune && git rebase origin/master
  # Edit all modified & new files
  edit = "!$EDITOR `git ls-files -m --other --exclude-standard`"
  editm = "!$EDITOR `git ls-files -m --other --exclude-standard | fzf-tmux -m`"
  # Checkout/delete fuzzy-find branch
  cb = "!git checkout $(git branch -vv | fzf-tmux | sed 's/*//' | awk '{print $1}')"
  db = "!git branch -d $(git branch -vv | fzf-tmux -m | sed 's/*//' | awk '{print $1}')"
  Db = "!git branch -D $(git branch -vv | fzf-tmux -m | sed 's/*//' | awk '{print $1}')"
  # Use fzf to select some modified files to add
  addm = "!git add `git ls-files -m --other --exclude-standard | fzf-tmux -m`"
  addmp = "!git add -p `git ls-files -m --other --exclude-standard | fzf-tmux -m`"
  bclean = "!git branch --merged | grep -v '*' | xargs -n 1 git branch -d"
  grephistory = "!f(){ git log -S "${1}" --oneline | cut -d' ' -f1 | xargs git grep "$1"; };f"
  squash=!f(){ git reset --soft HEAD~${1} && git commit --edit -m"$(git log --format=%B --reverse HEAD..HEAD@{1})"; };f
[apply]
  whitespace = fix
[branch]
  autosetupmerge = true
[color]
  branch = auto
  diff = auto
  interactive = auto
  status = auto
  ui = auto
[commit]
  # Show diff when committing
  verbose = true
[core]
  excludesfile = ~/.gitignore
  autocrlf = input
  editor = $EDITOR
  whitespace = fix,space-before-tab,tab-in-indent,trailing-space
  pager = less -r
[diff]
  algorithm = patience
[help]
  autocorrect = 1
[merge]
  defaultToUpstream = true
[pull]
  rebase = true
[push]
  default = current
[rebase]
  autosquash = true
# Local modifications / auth
[include]
  path=~/.gitconfig.local
