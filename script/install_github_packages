#!/usr/bin/env bash
# Install some specific packages directly from GitHub. Specifically:
#
# - agg (asciinema gif generator)
# - bun
# - ctop
# - delta
# - deno
# - difftastic
# - docker-compose
# - fnm
# - fx
# - fzf (because Bookworm is very old)
# - github cli
# - goose
# - helix
# - hugo (latest)
# - lazydocker
# - lazygit
# - luals
# - ncspot
# - neovim (latest)
# - pistol
# - psst
# - sad
# - shfmt
# - wezterm
# - yazi
# - yq
# - zellij
# - zoxide (Bookworm version is very old)
#
# Usage `install_github_packages [package_names...]`

set -euo pipefail
IFS=$'\n\t'
export DEBIAN_FRONTEND=noninteractive

# shellcheck source=./stowed-files/bash/.profile
declare dotfiles_root
dotfiles_root="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

AVAILABLE_PACKAGES=(
  agg
  bun
  ctop
  delta
  deno
  difftastic
  docker-compose
  fnm
  fx
  fzf
  # Bookworm tracking recent version already, can use apt
  # github-cli
  goose
  helix
  hugo
  lazydocker
  lazygit
  luals
  # Use via flatpak due to conflict in glibc
  # ncspot
  pistol
  psst
  neovim
  sad
  shfmt
  wezterm
  yazi
  yq
  zellij
  zoxide
)

print_usage() {
  echo "Usage: ${0} [-h|--help] [-s|--sole-package]"
  echo
  echo "Install packages directly from GitHub. Available packages:"
  echo
  for package in "${AVAILABLE_PACKAGES[@]}"; do
    echo "- ${package}"
  done
  echo
  echo "Options:"
  echo "-h|--help: Show this message"
}

echo_stderr() {
  >&2 echo "${@}"
}

get_latest_release_url() {
  local repo="$1"
  local match="$2"
  local urls

  local release_json_url="https://api.github.com/repos/${repo}/releases/latest"
  urls=$(curl --silent "${release_json_url}" | jq -r '.assets[]?.browser_download_url' | grep "${match}")
  if [[ -z "${urls}" ]]; then
    echo_stderr "Error: Could not find url for ${repo} matching ${match}"
    exit 2
  fi
  echo "${urls}" | head -n 1
}

install_bin() {
  local repo="${1}"
  local match="${2}"
  local name="${3:-}"
  if [[ -z "${name}" ]]; then
    name="$(basename "${repo}")"
  fi

  local url
  url="$(get_latest_release_url "${repo}" "${match}")"

  local install_location="$HOME/.local/bin"
  mkdir -p "${install_location}"
  echo -n "Downloading ${name} ... "
  wget --quiet -O "${install_location}/${name}" "${url}"
  chmod 755 "${install_location}/${name}"
  echo "${name} installed"
}

install_deb() {
  local repo="${1}"
  local match="${2}"
  local name
  local download_dir

  name="$(basename "${repo}")"

  local url
  url="$(get_latest_release_url "${repo}" "${match}")"

  download_dir="$(mktemp --directory "${name}"XXX)"
  pushd "${download_dir}" >/dev/null
  wget --quiet -O "${name}.deb" "${url}"
  echo "Installing ${repo} (requires sudo) ... "
  sudo dpkg -i "${name}.deb"
  popd >/dev/null
  rm -rf "${download_dir}"
}

install_tarball() {
  local repo="${1}"
  local match="${2}"
  local name="${3:-}"
  if [[ -z "${name}" ]]; then
    name="$(basename "${repo}")"
  fi

  local url
  url="$(get_latest_release_url "${repo}" "${match}")"

  local install_location="$HOME/.local/bin"

  local download_dir
  download_dir="$(mktemp --directory "${name}"XXX)"

  pushd "${download_dir}" >/dev/null
  wget --quiet -O "${name}.tar.gz" "${url}"
  echo -n "Expanding ${name}.tar.gz ... "
  tar xvf "${name}.tar.gz" >/dev/null
  if [[ -f "${name}" ]]; then
    mv "${name}" "${install_location}/${name}"
  else
    local file_path
    # File wasn't in the root of the tarball, find matching name to move
    file_path="$(find . -type f -name "${name}")"
    if [[ -n "${file_path}" ]]; then
      mv "${file_path}" "${install_location}/${name}"
    else
      echo_stderr "Error: Could not find ${name} in ${download_dir}"
      find "${download_dir}" -type f
      exit 2
    fi
  fi
  chmod 755 "${install_location}/${name}"
  popd >/dev/null
  rm -rf "${download_dir}"
  echo "${name} installed"
}

install_zip() {
  local repo="${1}"
  local match="${2}"
  local name
  name="$(basename "${repo}")"

  local url
  url="$(get_latest_release_url "${repo}" "${match}")"

  local install_location="$HOME/.local/bin"

  local download_dir
  download_dir="$(mktemp --directory "${name}"XXX)"

  pushd "${download_dir}" >/dev/null
  wget --quiet -O "${name}.zip" "${url}"
  echo -n "Unzipping ${name}.zip ... "
  unzip -q -o -j -d . "${name}.zip"
  mv "${name}" "${install_location}/${name}"
  chmod 755 "${install_location}/${name}"
  popd >/dev/null
  rm -rf "${download_dir}"
  echo "${name} installed"
}

install_agg() {
  install_bin 'asciinema/agg' 'agg-x86_64-unknown-linux-musl'
}

install_bun() {
  install_zip 'oven-sh/bun' 'bun-linux-x64-baseline.zip'
}

install_ctop() {
  install_bin 'bcicen/ctop' 'ctop-.*-linux-amd64'
}

install_delta() {
  install_deb 'dandavison/delta' 'git-delta_.*_amd64.deb'
}

install_deno() {
  install_zip 'denoland/deno' 'deno-x86_64-unknown-linux-gnu.zip'
}

install_difftastic() {
  install_tarball 'wilfred/difftastic' 'difft-x86_64-unknown-linux-gnu.tar.gz' 'difft'
}

install_docker_compose() {
  install_bin 'docker/compose' 'linux-x86_64' 'docker-compose'
}

install_github_cli() {
  install_deb 'cli/cli' 'gh_.*_linux_amd64.deb'
}

install_fnm() {
  install_zip 'Schniz/fnm' 'fnm-linux.zip'
}

install_fx() {
  install_bin 'antonmedv/fx' 'fx_linux_amd64'
}

install_fzf() {
  install_tarball 'junegunn/fzf' 'fzf-.*-linux_amd64.tar.gz'
}

install_goose() {
  install_tarball 'block/goose' 'goose-x86_64-unknown-linux-gnu.tar.bz2'
}

install_helix() {
  install_bin 'helix-editor/helix' 'x86_64.AppImage' 'hx'
}

install_hugo() {
  install_deb 'gohugoio/hugo' 'hugo_extended_.*_linux-amd64.deb'
}

install_lazydocker() {
  install_tarball 'jesseduffield/lazydocker' 'lazydocker_.*_Linux_x86_64.tar.gz'
}

install_lazygit() {
  install_tarball 'jesseduffield/lazygit' 'lazygit_.*_Linux_x86_64.tar.gz'
}

install_lua_language_server() {
  local url
  url="$(get_latest_release_url 'LuaLS/lua-language-server' 'lua-language-server-.*-linux-x64.tar.gz')"
  local name="lua-language-server"

  local install_location="$HOME/.local/share/lua-language-server"
  mkdir -p "${install_location}"

  local download_dir
  download_dir="$(mktemp --directory "${name}"XXX)"

  pushd "${download_dir}" >/dev/null
  wget --quiet -O "${name}.tar.gz" "${url}"
  echo -n "Expanding ${name}.tar.gz ... "
  tar xzvf "${name}.tar.gz" -C "${install_location}" >/dev/null

  # Binary is symlinked via stow

  popd >/dev/null
  rm -rf "${download_dir}"
  echo "${name} installed"
}

install_ncspot() {
  install_tarball 'hrkfdn/ncspot' 'ncspot-v.*-linux-x86_64.tar.gz'
}

install_sad() {
  install_deb 'ms-jpq/sad' 'x86_64-unknown-linux-gnu.deb'
}

install_neovim_stable() {
  local url
  local vim_path="$HOME/.local/bin/nvim"

  echo -n "Installing neovim stable ... "
  mkdir -p "$(dirname "${vim_path}")"
  url="$(get_latest_release_url "neovim/neovim" "nvim-linux-x86_64.appimage")"
  wget "${url}" --quiet --output-document "$vim_path"
  chmod +x "$vim_path"
  echo "neovim stable installed"

  if [[ -n "${IS_DOCKER:-}" ]]; then
    local vim_appimage_dir_path="$HOME/.local/appimages/nvim"
    echo "Expanding neovim AppImage"
    mkdir -p "${vim_appimage_dir_path}"
    (
      cd "${vim_appimage_dir_path}"
      mv "${vim_path}" .
      "${vim_appimage_dir_path}/nvim" --appimage-extract >/dev/null
      ln -s "${vim_appimage_dir_path}/squashfs-root/AppRun" "${vim_path}"
    )
  fi

  if [[ -d "$HOME/.local/share/nvim/lazy/lazy.nvim" ]]; then
    echo "Syncing plugins"
    "${vim_path}" --headless "+Lazy! sync" +qa
  else
    echo "Must manually launch Neovim to install plugins"
  fi

  # Don't try to set alternatives if not available
  if ! update-alternatives --query vim &>/dev/null; then
    >&2 echo "update-alternatives not available for vim, skipping"
    return
  fi

  # Assume if it's already set for `vim`, then it's set for the others
  if update-alternatives --list vim | head -n1 | grep -qv "${vim_path}"; then
    echo "Setting neovim as default editor (requires sudo)"
    sudo update-alternatives --install /usr/bin/ex ex "${vim_path}" 110
    sudo update-alternatives --install /usr/bin/vi vi "${vim_path}" 110
    sudo update-alternatives --install /usr/bin/view view "${vim_path}" 110
    sudo update-alternatives --install /usr/bin/vim vim "${vim_path}" 110
    sudo update-alternatives --install /usr/bin/vimdiff vimdiff "${vim_path}" 110
  fi
}

install_pistol() {
  install_bin 'doronbehar/pistol' 'pistol-static-linux-x86_64'
}

install_psst() {
  # One-off due to being a .deb which is in a .zip
  local name="psst"
  local repo="jpochyla/psst"
  local url="https://nightly.link/jpochyla/psst/workflows/build/main/psst-deb-amd64.zip"

  download_dir="$(mktemp --directory "${name}"XXX)"
  pushd "${download_dir}" >/dev/null
  wget --quiet -O "${name}.zip" "${url}"
  echo -n "Unzipping ${name}.zip ... "
  unzip -q -o -j -d . "${name}.zip"
  echo "Installing ${repo} (requires sudo) ... "
  sudo dpkg -i psst*.deb
  popd >/dev/null
  rm -rf "${download_dir}"
}

install_shfmt() {
  install_bin 'mvdan/sh' 'shfmt_v.*_linux_amd64' 'shfmt'
}

install_wezterm() {
  install_deb 'wez/wezterm' 'wezterm-.*.Debian12.deb'
}

install_yazi() {
  local url
  # musl version because Bookworm is old and yazi requires a newer glibc (2.39)
  url="$(get_latest_release_url "sxyazi/yazi" "yazi-x86_64-unknown-linux-musl.zip")"

  local bin_location="$HOME/.local/bin"
  local completion_location="/home/fortes/.local/completion.d/"

  local download_dir
  download_dir="$(mktemp --directory yaziXXX)"

  pushd "${download_dir}" >/dev/null
  wget --quiet -O yazi.zip "${url}"
  echo -n "Unzipping yazi.zip ... "
  unzip -q -o -j -d . yazi.zip

  mv -t "${bin_location}" {ya,yazi}
  chmod 755 "${bin_location}"/{ya,yazi}
  mv -t "${completion_location}" yazi.bash
  popd >/dev/null
  rm -rf "${download_dir}"
  echo "yazi installed"
}

install_yq() {
  install_bin 'mikefarah/yq' 'yq_linux_amd64'
}

install_zellij() {
  install_tarball 'zellij-org/zellij' 'zellij-x86_64-unknown-linux-musl.tar.gz'
}

install_zoxide() {
  install_deb 'ajeetdsouza/zoxide' 'zoxide_.*_amd64.deb'
}

install_github_packages() {
  # Make sure to load `command_exists` helper
  # shellcheck source=./stowed-files/bash/.profile
  . "${dotfiles_root}/stowed-files/bash/.profile"

  if ! command_exists apt-get; then
    echo_stderr "Only works on Debian-like systems"
    exit 1
  fi

  local packages=("$@")
  if [ "${#packages[@]}" -eq 0 ]; then
    packages=("${AVAILABLE_PACKAGES[@]}")
  fi

  while (("$#")); do
    case "${1}" in
    -h | --help)
      print_usage
      exit 0
      ;;
    esac
    shift
  done

  # shellcheck source=/dev/null
  . "${HOME}/.profile.local"

  echo -n "Installing GitHub packages:"
  printf " %s" "${packages[@]}"
  echo

  for package in "${packages[@]}"; do
    case "${package}" in
    agg)
      install_agg
      ;;
    bun)
      install_bun
      ;;
    ctop)
      install_ctop
      ;;
    delta)
      install_delta
      ;;
    deno)
      install_deno
      ;;
    difftastic)
      install_difftastic
      ;;
    docker-compose)
      install_docker_compose
      ;;
    github-cli)
      install_github_cli
      ;;
    fnm)
      install_fnm
      ;;
    fx)
      install_fx
      ;;
    fzf)
      install_fzf
      ;;
    goose)
      install_goose
      ;;
    helix)
      install_helix
      ;;
    hugo)
      install_hugo
      ;;
    lazydocker)
      install_lazydocker
      ;;
    lazygit)
      install_lazygit
      ;;
    luals)
      install_lua_language_server
      ;;
    ncspot)
      install_ncspot
      ;;
    neovim)
      install_neovim_stable
      ;;
    pistol)
      install_pistol
      ;;
    psst)
      [[ -z "${IS_HEADLESS:-}" ]] && install_psst
      ;;
    sad)
      install_sad
      ;;
    shfmt)
      install_shfmt
      ;;
    wezterm)
      [[ -z "${IS_HEADLESS:-}" ]] && install_wezterm
      ;;
    yazi)
      install_yazi
      ;;
    yq)
      install_yq
      ;;
    zellij)
      install_zellij
      ;;
    zoxide)
      install_zoxide
      ;;
    *)
      echo_stderr "Error: Unrecognized package: ${package}"
      exit 1
      ;;
    esac
  done

  echo "GitHub packages installed!"
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  install_github_packages "${@}"
fi
