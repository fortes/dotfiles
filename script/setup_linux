#!/usr/bin/env bash
# Make your machine usable
#
# Usage: setup_linux [--apt-only]

set -euo pipefail
IFS=$'\n\t'

declare dotfiles_root
dotfiles_root="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

# Make sure not to get stuck on any prompts
export DEBIAN_FRONTEND=noninteractive

# Common apt-get arguments
declare -r APT_ARGS=(
  -qq
  -o=Dpkg::Use-Pty=0
  -o=Dpkg::Progress-Fancy=0
  -o=APT::Get::Show-Progress=false
  --assume-yes
  --fix-broken
  --no-install-recommends
)

declare -r APT_PACKAGES_FILE="${dotfiles_root}/script/apt-packages.txt"
declare -a APT_PACKAGES
mapfile -t APT_PACKAGES < <(awk 'NF && $1 !~ /^#/' "${APT_PACKAGES_FILE}")

has_updated=""

usage() {
  echo "Usage: setup_machine [--apt-only]"
}

# Avoid running multiple times
apt_update_once() {
  if [[ -z "$has_updated" ]]; then
    has_updated=1
    echo "Running apt-get update (requires sudo)"
    sudo -E apt-get update -qq
  fi
}

check_prerequisites() {
  if ! command_exists apt-get; then
    echo_stderr "Only works on Debian-like systems"
    exit 1
  fi

  if ! command_exists lsb_release || ! command_exists add-apt-repository; then
    echo "Installing add-apt-repository and lsb-release (requires sudo)"
    apt_update_once
    sudo -E apt-get install "${APT_ARGS[@]}" \
      lsb-release
  fi

  if ! lsb_release -ds | tail -n 1 | grep -iq debian; then
    echo_stderr "Warning: Things might break outside of Debian"
  fi
}

echo_stderr() {
  >&2 echo "${@}"
}

# NOTE: Does not work on Docker, which relies on host config
increase_max_watchers() {
  declare -r sysctl_conf_path="/etc/sysctl.d"
  declare -r conf_file_path="${sysctl_conf_path}/20-increase-max-watchers.conf"
  declare -r max_watches="524288"

  if [ ! -d "${sysctl_conf_path}" ]; then
    echo "Creating sysctl.d directory (requires sudo)"
    sudo mkdir -p "${sysctl_conf_path}"
  fi

  if [ ! -f "$conf_file_path" ]; then
    echo "Increasing max watchers (requires sudo)"
    echo "fs.inotify.max_user_watches=$max_watches" |
      sudo tee -a "$conf_file_path" &> /dev/null && sudo sysctl -p
    echo "Max watchers set to $max_watches"
  fi
}

install_apt_packages() {
  if [[ -n "${SKIP_INITIAL_APT_INSTALL:-}" ]]; then
    echo "Skipping apt package installation (SKIP_INITIAL_APT_INSTALL set)"
    return
  fi

  apt_update_once

  echo "Ensuring apt packages installed (requires sudo)"
  sudo -E apt-get install "${APT_ARGS[@]}" "${APT_PACKAGES[@]}"
  echo "Apt packages installed"
}

is_package_installed() {
  if dpkg-query -l "$1" | grep -q "^ii"; then
    return 0
  else
    return 1
  fi
}

set_default_applications() {
  if command_exists nvim && update-alternatives --query editor &> /dev/null && ! update-alternatives --query editor | grep ^Value | grep -q nvim; then
    echo "Setting Neovim as default text editor (requires sudo)"
    sudo update-alternatives --install /usr/bin/editor editor "$(command -v nvim)" 60
  fi
}

setup_backports() {
  declare -r codename="$(lsb_release -cs | tail -n 1)"

  if grep -q "${codename}-backports" /etc/apt/sources.list{,.d/*} 2> /dev/null; then
    echo "Backports already in sources.list"
    return
  fi

  declare -r sources_path="/etc/apt/sources.list.d/backports.sources"

  echo "${codename}-backports not in sources.list, adding (requires sudo)"
  sudo tee "$sources_path" > /dev/null <<EOF
Types: deb
URIs: http://deb.debian.org/debian
Suites: ${codename}-backports
Components: main contrib non-free non-free-firmware
Signed-By: /usr/share/keyrings/debian-archive-keyring.gpg
EOF

  # New source requires forced updates
  has_updated=""
}

setup_docker() {
  if ! is_package_installed docker.io; then
    apt_update_once
    echo "Installing docker (requires sudo)"
    sudo -E apt-get install "${APT_ARGS[@]}" \
      docker.io docker-buildx docker-clean docker-cli docker-compose
  fi

  declare -r user="$(whoami)"
  if ! groups | grep -qw docker; then
    echo "Adding $user to docker group (requires sudo)"
    sudo usermod -aG docker "${user}"
    echo "$user now in docker group, must log back in to take effect"
  fi
}

setup_locale() {
  declare -r locale="en_US.UTF-8"

  if ! is_package_installed locales; then
    apt_update_once

    echo "Installing locales package (requires sudo)"
    sudo -E apt-get install "${APT_ARGS[@]}" \
      locales
  fi

  if ! locale | grep -q "LANG=${locale}"; then
    echo "Generating locale ${locale} (requires sudo)"
    # Uncomment from `locale.gen` file
    sudo sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
    echo "Setting locale to ${locale}"
    sudo sudo -E dpkg-reconfigure --frontend=noninteractive locales &&
      sudo -E update-locale LANG=${locale}
    sudo debconf-set-selections -c <<< "locales locales/default_environment_locale select ${locale}"
  fi
}

setup_nonfree() {
  if [[ -f /etc/apt/sources.list.d/debian.sources ]]; then
    if grep -q non-free /etc/apt/sources.list.d/debian.sources; then
      echo "Non-free already in sources.list"
      return
    fi

    # `add-apt-repository` doesn't seem to support the deb822 format
    # TODO: Find a better way to do this
    sudo sed -i.bak 's/Components: main$/Components: main contrib non-free non-free-firmware/' \
      /etc/apt/sources.list.d/debian.sources
  elif ! grep -q non-free /etc/apt/sources.list; then
    # Assume contrib and non-free always travel together
    echo "Adding contrib & non-free to sources (requires sudo)"
    sudo -E add-apt-repository --no-update --yes contrib > /dev/null
    sudo -E add-apt-repository --no-update --yes non-free > /dev/null
    sudo -E add-apt-repository --no-update --yes non-free-firmware > /dev/null

    # New source requires forced updates
    has_updated=""
  fi
}

setup_shell() {
  declare -r bash_path="$(which bash)"
  declare -r current_shell="$(getent passwd "$(id -un)" | awk -F : '{print $NF}')"

  if [[ "${current_shell}" != "${bash_path}" ]]; then
    echo "Changing shell to bash (requires sudo)"
    sudo chsh -s "${bash_path}" "$(whoami)"
  fi
}

main() {
  # Helper function to check if command exists
  command_exists() {
    command -v "$1" &> /dev/null
  }

  declare -r local_profile_path="$HOME/.profile.local"

  declare apt_only=''

  # Parse arguments
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --apt-only)
        apt_only=1
        ;;
      --help | -h)
        usage
        exit 0
        ;;
      *)
        echo_stderr "Unknown argument: $1"
        usage
        exit 1
        ;;
    esac
    shift
  done

  if [[ -n "${apt_only}" ]]; then
    install_apt_packages
    exit 0
  fi

  check_prerequisites
  setup_shell
  "${dotfiles_root}/script/set_dotfiles_remote"

  if [[ ! -f "${local_profile_path}" ]]; then
    echo "Generating ${local_profile_path}"
    "${dotfiles_root}/script/create_local_profile" > "${local_profile_path}"
  fi

  # shellcheck source=/dev/null
  . "${local_profile_path}"

  setup_nonfree
  setup_backports
  install_apt_packages
  "${dotfiles_root}/script/install_1password"
  [[ -z "${IS_CROSTINI:-}" ]] && [[ -z "${IS_DOCKER:-}" ]] &&
    "${dotfiles_root}/script/install_snap_packages"
  [[ -z "${IS_DOCKER:-}" ]] && "${dotfiles_root}/script/install_et"
  "${dotfiles_root}/script/install_github_packages"

  # Remove default files before stowing, otherwise stow fails
  "${dotfiles_root}/script/remove_default_dotfiles"
  "${dotfiles_root}/script/stow"

  # Misc system configs
  [[ -z "${IS_DOCKER:-}" ]] && increase_max_watchers
  pushd "${dotfiles_root}" > /dev/null
  "${dotfiles_root}/script/lock_local_files"
  popd > /dev/null
  set_default_applications
  [[ -z "${IS_DOCKER:-}" ]] && setup_docker
  setup_locale
  [[ -z "${IS_DOCKER:-}" ]] && "${dotfiles_root}/script/set_default_browser"

  # Non-apt package managers
  "${dotfiles_root}/script/install_node_packages"
  "${dotfiles_root}/script/install_python_packages"
  "${dotfiles_root}/script/install_llm_plugins"
  "${dotfiles_root}/script/install_yazi_plugins"

  "${dotfiles_root}/script/generate_completions"

  echo "Setup complete!"
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "${@}"
fi
