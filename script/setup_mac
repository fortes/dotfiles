#!/usr/bin/env bash
# Work in progress setup for the Mac
#
# TODO:
# - Use `/bin/sh` instead of bash, since will eventually go away
#   - Or maybe `dash`?
# - Move over to zsh
#
# Usage: setup_mac

set -euo pipefail
IFS=$'\n\t'

declare -r brew_prefix="/opt/homebrew"
declare dotfiles_root
dotfiles_root="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

BREW_PACKAGES=(
  agg
  asciinema
  bash
  bash-completion@2
  bat
  block-goose-cli
  oven-sh/bun/bun
  chafa
  cmus
  # For Docker
  colima
  delta
  difftastic
  docker
  duf
  MisterTea/et/et
  eza
  f2
  fd
  # For yazi
  ffmpeg
  fnm
  fx
  fzf
  gh
  git
  git-crypt
  git-extras
  git-lfs
  gnupg
  gocryptfs
  gron
  htop
  hugo
  iftop
  # For yazi
  imagemagick
  jj
  jq
  keychain
  lua-language-server
  marksman
  moreutils
  mpv
  ncdu
  neovim
  ollama
  pipx
  ripgrep
  sad
  # For yazi
  sevenzip
  shellcheck
  shfmt
  speedtest-cli
  stow
  tmux
  wget
  yazi
  yq
  yt-dlp
  zoxide
)

CASK_PACKAGES=(
  1password
  1password-cli
  claude
  firefox
  font-google-sans-code
  font-jetbrains-mono
  # For yazi
  font-symbols-only-nerd-font
  ghostty
  google-chrome
  plexamp
  rectangle
  signal
  visual-studio-code
)

usage() {
  echo "Usage: setup_mac [--brew-only] [--cask-only]"
}

setup_shell() {
  local homebrew_bash_path="${brew_prefix}/bin/bash"

  # TODO: Should really just move to zsh since Mac will probably ditch bash
  if [[ -x "${homebrew_bash_path}" ]] && [[ "${SHELL:-}" != "${homebrew_bash_path}" ]]; then
    if ! grep -q "${homebrew_bash_path}" /etc/shells; then
      echo "Adding ${homebrew_bash_path} to shell list (requires sudo)"
      echo "${homebrew_bash_path}" | sudo tee -a /etc/shells > /dev/null
    fi

    # Only change shell if running interactively, otherwise fails in CI which
    # can't do the required auth
    if [[ -t 1 ]]; then
      echo "Changing shell to bash ($homebrew_bash_path)"
      chsh -s "${homebrew_bash_path}"
    fi
  fi
}

install_command_line_tools() {
  if ! xcode-select -p > /dev/null 2>&1; then
    echo "Installing command line tools"
    xcode-select --install
  fi
}

install_homebrew() {
  if [[ ! -x "${brew_prefix}/bin/brew" ]]; then
    echo "Installing Homebrew"
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
  fi

  if [[ ! -f "$HOME/.profile.brew" ]]; then
    echo "Exporting brew shellenv"
    "${brew_prefix}/bin/brew" shellenv > "$HOME/.profile.brew"
  fi

  # Ensure `brew` in path for rest of script
  # shellcheck source=/dev/null
  . "$HOME/.profile.brew"
}

install_homebrew_packages() {
  echo "Installing homebrew packages"
  # Use full path just in case `brew` not in path during initial setup
  "${brew_prefix}/bin/brew" install --quiet "${BREW_PACKAGES[@]}"
}

install_homebrew_casks() {
  echo "Installing homebrew casks"

  local casks_to_install=()

  for cask in "${CASK_PACKAGES[@]}"; do
    if ! "${brew_prefix}/bin/brew" list --cask "$cask" &> /dev/null; then
      casks_to_install+=("${cask}")
    fi
  done

  if [[ ${#casks_to_install[@]} -gt 0 ]]; then
    echo "Installing cask packages: ${casks_to_install[*]}"
    "${brew_prefix}/bin/brew" install --cask --quiet "${casks_to_install[@]}"
  else
    echo "All cask packages already installed"
  fi
}

main() {
  if ! uname -s | grep -q Darwin; then
    >&2 echo "Only works on Mac!"
    exit 1
  fi

  # Make sure to load `command_exists` helper
  # shellcheck source=./stowed-files/bash/.profile
  . "${dotfiles_root}/stowed-files/bash/.profile"

  declare brew_only=''
  declare cask_only=''
  # Parse arguments
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --homebrew-only | --brew-only)
        brew_only=1
        ;;
      --cask-only)
        cask_only=1
        ;;
      --help | -h)
        usage
        exit 0
        ;;
      *)
        >&2 echo "Unknown argument: $1"
        usage
        exit 1
        ;;
    esac
    shift
  done

  if [[ -n "${brew_only}" ]]; then
    install_homebrew_packages
    exit 0
  fi

  if [[ -n "${cask_only}" ]]; then
    install_homebrew_casks
    exit 0
  fi

  local local_profile_path="$HOME/.profile.local"

  if [[ ! -f "$local_profile_path" ]]; then
    echo "Generating $local_profile_path"
    "${dotfiles_root}/script/create_local_profile" > "$local_profile_path"
  fi

  # shellcheck source=/dev/null
  . "$local_profile_path"

  install_command_line_tools
  install_homebrew
  install_homebrew_packages
  install_homebrew_casks

  # Remove default files before stowing, otherwise stow fails
  "${dotfiles_root}/script/remove_default_dotfiles"
  "${dotfiles_root}/script/stow"

  setup_shell

  # Disable press and hold in VSCode
  defaults write com.microsoft.VSCode ApplePressAndHoldEnabled -bool false

  "${dotfiles_root}/script/lock_local_files"
  "${dotfiles_root}/script/set_dotfiles_remote"

  # Non-brew package managers
  "${dotfiles_root}/script/install_node_packages"
  "${dotfiles_root}/script/install_python_packages"
  "${dotfiles_root}/script/install_llm_plugins"
  "${dotfiles_root}/script/install_yazi_plugins"

  "${dotfiles_root}/script/generate_completions"

  # TODO: Neovim plugin install?

  echo "Setup complete!"
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  if [[ "${BASH_VERSINFO:-0}" -ge 4 ]]; then
    main "${@}"
  else
    # Ancient Mac Bash version does not support `@`
    main
  fi
fi
