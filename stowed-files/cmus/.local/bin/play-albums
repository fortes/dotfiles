#!/usr/bin/env bash
[[ "$TRACE" ]] && set -o xtrace

set -o errexit
set -o nounset
set -o pipefail

# shellcheck disable=SC2016
BEET_FORMAT_STRING='$mb_albumid|$original_year|%left{$albumartist,40}|%left{$album,40}|$genre'
COLUMN_NAMES='ID,Year,Artist,Album,Genre'

FZF_ARGS=(
  --header-lines 1
  --height 80%
  --layout=reverse
  --multi
  -0
  --with-nth 2..
  --accept-nth 1
)

main() {
  local album_ids
  local append=false
  local beet_album_query
  local beet_query_args=()
  local beet_query_results

   # Parse arguments
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --append)
        append=true
        shift
        ;;
      *)
        beet_query_args+=("$1")
        shift
        ;;
    esac
  done

  if [[ ${#beet_query_args[@]} -eq 0 ]]; then
    beet_query_args=("added:-4w..")
  fi

  # Purposefuly want to use unquoted here
  # shellcheck disable=SC2086
  beet_query_results=$(beet ls -a -f"${BEET_FORMAT_STRING}" "${beet_query_args[@]}" added- albumartist+ original_year-)

  album_ids=$(echo "${beet_query_results}" | \
    column -t -s '|' --table-columns "${COLUMN_NAMES}" | \
    fzf "${FZF_ARGS[@]}")

  if [ -z "$album_ids" ]; then
    echo "No albums found"
    return 1
  fi

  beet_album_query=""
  for album_id in $album_ids; do
    beet_album_query="${beet_album_query}, mb_albumid:${album_id}"
  done

  # Remove initial ', ' using parameter substitution
  beet_album_query=${beet_album_query#, }

  if ! ${append}; then
    cmus-remote --clear --queue
  fi

  # Purposefuly want to use unquoted here
  # shellcheck disable=SC2086
  beet play -y ${beet_album_query} original_year- album- track+

  # Wait a beat in order to make sure cmus has queued the album
  sleep 2

  # Switch to queue view
  cmus-remote --raw 'view queue'

  # If the queue was cleared, advance to the next track to start new albums
  if ! ${append}; then
    if cmus-remote --raw status | grep -qE "^status (paused|playing)"; then
      # cmus was already playing
      cmus-remote --play && cmus-remote --next
    else
      cmus-remote --play
    fi
  fi
}

if cmus-remote --raw status > /dev/null 2>&1; then
  main "$@"
else
  echo "cmus not running"
  exit 1
fi
