#!/bin/bash

set -euo pipefail
IFS=$'\n\t'

main() {
  # Args are passed in but annoying to parse, easier to call into `cmus-remote`
  if ! command_exists cmus-remote; then
    return
  fi

  local album
  local albumartist
  local artist
  local cmus_status
  local file
  local mb_track_id
  local player_status
  local status_file_path="/tmp/cmus-status.txt"
  local title

  cmus_status="$(cmus-remote -Q 2>&1)"

  if grep -q "cmus is not running" <<< "${cmus_status}"; then
    rm -f "${status_file_path}"
    return
  fi

  player_status="$(grep -e '^status' <<< "${cmus_status}" | head -n 1 | awk '{print $2}')"

  if [[ "${player_status}" == "stopped" || "${player_status}" == "exiting" ]]; then
    rm -f "${status_file_path}"
    return
  fi

  album="$(grep '^tag album ' <<< "${cmus_status}" | cut -d ' ' -f 3-)"
  albumartist="$(grep '^tag albumartist ' <<< "${cmus_status}" | cut -d ' ' -f 3-)"
  artist="$(grep '^tag artist ' <<< "${cmus_status}" | cut -d ' ' -f 3-)"
  file="$(grep '^file ' <<< "${cmus_status}" | cut -d ' ' -f 3-)"
  mb_track_id="$(grep '^tag musicbrainz_trackid ' <<< "${cmus_status}" | cut -d ' ' -f 3-)"
  title="$(grep '^tag title ' <<< "${cmus_status}" | cut -d ' ' -f 3-)"

  cat > "${status_file_path}" <<CMUS_STATUS
${player_status}
${title}
${artist}
${album}
${albumartist}
${mb_track_id}
${file}
CMUS_STATUS

  # Update status bar if running in tmux
  if [[ -n "${TMUX:-}" ]]; then
    tmux refresh-client -S
  fi

  if [[ -n ${DISPLAY:-} ]]; then
    # Run in background since PNG generation can take a while
    cmus-album-background >> /tmp/cmus-album-background.log 2>&1 &
  fi

  command_exists cmus-scrobbler && cmus-scrobbler >> /tmp/cmus-scrobbler.log
}

main "${@:-}"
