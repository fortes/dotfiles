#!/usr/bin/env bash
# Swap color scheme between light and dark in `tmux`
#
# Usage: toggle-color-scheme [light|dark]
set -euo pipefail

main() {
  local new_theme
  new_theme="${1:-}"

  if [[ -z "${new_theme}" ]]; then
    if [[ "$(tmux show-environment -g COLOR_THEME | cut -d= -f2-)" == "light" ]]; then
      new_theme="dark"
    else
      new_theme="light"
    fi
  fi

  echo -n "Setting color scheme to ${new_theme}..."

  tmux set-environment -g COLOR_THEME "${new_theme}" && \
    tmux set-environment COLOR_THEME "${new_theme}" && \
    tmux source-file ~/.config/tmux/tmux.conf && \
    tmux refresh-client -S && \
    tmux display-message "Color scheme set to ${new_theme}"

  echo "done!"

  # TODO: In non-tmux contexts, this is enough (and doesn't need Wezterm)
  # So perhaps need to fix the piping that isn't happening out of tmux, and then
  # this can all be done via a script instead of having to involve Wezterm
#   # Colorscheme scripts have unbound variables
#   set +u
#   if [[ "${new_theme}" == "light" ]]; then
#     # shellcheck source=../../../../scripts/base16-default-light.sh
#     . ~/dotfiles/scripts/base16-default-light.sh
#   else
#     # shellcheck source=../../../../scripts/base16-default-dark.sh
#     . ~/dotfiles/scripts/base16-default-dark.sh
#   fi
#   set -u
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "${@:-}"
fi
