# vim:fdm=marker et fdl=2 sts=2 sw=2 ts=2

# Use current directory when creating new panes & windows
bind-key -N "Create new window" c new-window -c "#{pane_current_path}"
bind-key -N "Split window horizontally" '"' split-window -c "#{pane_current_path}"
bind-key -N "Split window vertically" % split-window -h -c "#{pane_current_path}"

# Custom Keybindings {{{

# Reload config via 'r' (also refresh-client, since that's default binding)
bind-key -N "Reload Configuration" r {
  source-file ~/.config/tmux/tmux.conf;
  refresh-client;
  display-message "Config reloaded"
}
# Shortcut to bind to main-vertical layout via 'R' (unbound by default)
bind-key -N "Select main-vertical layout" R select-layout main-vertical

# Open a floating terminal
bind-key -N "Open console" "`" {
  display-popup -T "#[fg=cyan] console" -w 80% -h 80% -E bash
}

# Move window index via P/N
bind-key -N "Move window to previous" -r P swap-window -t -1\; previous-window
bind-key -N "Move window to next" -r N swap-window -t +1\; next-window

# Select prefix
bind-key -N "Select prefix key" G {
  display-menu -T Prefix -x P -y P \
    "C-a" "a" "source-file -q ~/.config/tmux/tmux.prefix-a.conf" \
    "C-b" "b" "source-file -q ~/.config/tmux/tmux.prefix-b.conf" \
    "C-g" "g" "source-file -q ~/.config/tmux/tmux.prefix-g.conf" \
}
bind-key -N "Select prefix key" -Troot MouseUp1StatusLeft {
  display-menu -T Prefix -x P -y P \
    "C-a" "a" "source-file -q ~/.config/tmux/tmux.prefix-a.conf" \
    "C-b" "b" "source-file -q ~/.config/tmux/tmux.prefix-b.conf" \
    "C-g" "g" "source-file -q ~/.config/tmux/tmux.prefix-g.conf" \
}

# Copy password from 1Password to tmux paste buffer
if-shell 'command -v op' {
  bind-key -N "Copy password to paste buffer" . {
    display-popup -T "#[fg=cyan] 1Password" -w 80% -h 80% -E -E \
      'bash -c "set -o pipefail; \
        op_get_pass | tmux load-buffer - \
        && tmux display-message -N \"Copied to paste buffer\""'
  }
}

# }}}

# Start window/pane numbering at 1 instead of 0
set-option -gq base-index 1
set-option -gq pane-base-index 1

# Use full true color & italics in the terminal
set-option -gq default-terminal "tmux-256color"
set-option -saq terminal-overrides ',xterm-256color:RGB'

# Be brief with messages
set-option -gq display-time 1000

# Make sure `Escape` isn't unnecessarily slow in vim
set-option -gsq escape-time 10

# Enable focus events, helps with `autoread` in vim
set-option -gq focus-events on

# Keep more terminal output
set-option -gq history-limit 100000

# Enable mouse support
set-option -gq mouse on

# Secondary panes should be smaller
set-option -gq other-pane-height 20
set-option -gq other-pane-width 80

# Renumber when closing windows
set-option -gq renumber-windows on

# Set terminal title
set-option -gq set-titles on
set-option -gq set-titles-string "#W [#I]"

# No beeping, ever
set-option -gq visual-activity on
set-option -gq visual-bell off

# Allow setting clipboard via OSC52 sequence
set-option -gq set-clipboard on

# Make clipboard work on Windows
if-shell 'uname -a | grep -q microsoft-standard' {
  bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "/mnt/c/Windows/System32/clip.exe"
}

# Message Command Bar {{{

# Default background instead of jarring yellow
set-option -gq message-style fg=cyan

# }}}

# Status Bar {{{

# Default text and background
set-option -gq status-style bg=colour235,fg=default,dim
if-shell 'test "${COLOR_THEME:-}" = "light"' {
  set-option -gq status-style bg=colour254,fg=default,dim
}
set-option -gq status-justify left

# Clear default status before adding
set-option -gq status-left ''
set-option -gq status-right ''

# Terse listing
set-option -gq window-status-format "  #[fg=yellow,dim]#I#{?window_flags,#{window_flags},#[fg=default]:}#[fg=default]#W#[default]  "
set-option -gq window-status-current-format "  #[fg=yellow,bright]#I#[default]#F#[fg=white,bright]#W#[fg=default]  "
set-option -gq window-status-current-style bg=black,bright
set-option -gq window-status-bell-style underscore
set-option -gq window-status-separator ''

# Indicate prefix and when activated
set-option -gaq status-left '#{?client_prefix,#[bg=white fg=brightcyan reverse bright] #{prefix} #[bg=default default], #[dim]#{prefix}#[default] }'

set-option -gq status-right-length 100
set-option -gaq status-right-style dim
# Current music, if applicable
set-option -gaq status-right "#[fg=colour243, italics]#(tmux-music-status)#[fg=default,default]"
# Hostname only when using SSH
if-shell 'test -n "${SSH_CONNECTION}"' {
  set-option -gaq status-right "#[fg=blue]#{=14:host_short}#[fg=default] "
}
# Date (if not on SSH)
if-shell 'test -z "${SSH_CONNECTION}"' {
  set-option -gaq status-right "%d-%m "
}
# Time
set-option -gaq status-right '%R'
# }}}

# Tweak some behaviors when using SSH
if-shell 'test -n "${SSH_CONNECTION}"' {
  # Use a different prefix when using SSH in order to make nesting easier
  source-file -q ~/.config/tmux/tmux.prefix-a.conf

  # Distinguish bottom border
  set-option -gq status-bg colour236

  # Adjust prefix display color, clearing out the old one
  set-option -gq status-left '#{?client_prefix,#[fg=brightgreen reverse] #{prefix} #[bg=default default], #[dim]#{prefix}#[default] }'

  # Eternal terminal works over SSH connection, but we still want the
  # local agent
  if-shell 'test -z "${ET_VERSION}"' {
    # Use consistently named agent forwarding path for easy resuming without
    # breaking existing shells. By default, tmux does special handling for
    # `$SSH_AUTH_SOCK`, so we have to use session env instead of global. But
    # you can't call `set-env` if there is no session yet which happens when first
    # starting the server. So we're stuck setting this via hooks.
    #
    # Note that there is an issue here when the session is first created, the first
    # window is created before the hook runs, so the environment will not be updated
    # for that session, but will work for all other panes / windows
    set-hook -g session-created {
      if-shell 'test -n \$SSH_AUTH_SOCK' {
        set-environment SSH_AUTH_SOCK ~/.ssh/ssh_auth_sock
      }
    }
    set-hook -g client-attached {
      if-shell 'test -n \$SSH_AUTH_SOCK' {
        set-environment SSH_AUTH_SOCK ~/.ssh/ssh_auth_sock
      }
    }
  }
}

# Treat Docker similar to SSH, since likely to be nested
if-shell 'test -n "${IS_DOCKER}"' {
  # Use a different prefix when using SSH in order to make nesting easier
  source-file -q ~/.config/tmux/tmux.prefix-a.conf

  # Distinguish bottom border
  set-option -gq status-bg colour236

  # Adjust prefix display color, clearing out the old one
  set-option -gq status-left '#{?client_prefix,#[fg=brightgreen reverse] #{prefix} #[bg=default default], #[dim]#{prefix}#[default] }'
}

# Music control, when available
if-shell 'command -v playerctl' {
  # Pause music via 'u', or click on right status
  bind-key -N "Pause music" u {
    run-shell -b "music-pause -t"
  }
  bind-key -N "Pause music" -Troot MouseUp1StatusRight {
    run-shell -b "music-pause -q"
  }

  # Music menu via 'U' or right click on right status
  bind-key -N "Show music menu" U {
    run-shell -b "tmux-music-menu"
  }
  bind-key -N "Show music menu" -Troot MouseUp3StatusRight {
    run-shell -b "tmux-music-menu"
  }
}

# Local config {{{
source-file -q ~/.tmux.conf.local
# }}}
