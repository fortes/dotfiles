#!/usr/bin/env bash
# Make your machine usable
#
# Usage: setup_machine [--apt-only] [--node-only] [--python-only]

set -euo pipefail
IFS=$'\n\t'

# Make sure not to get stuck on any prompts
export DEBIAN_FRONTEND=noninteractive

has_updated=""

usage() {
  echo "Usage: setup_machine [--apt-only] [--node-only] [--python-only]"
}

# Avoid running multiple times
apt_update_once() {
  if [[ -z "$has_updated" ]]; then
    has_updated=1
    echo "Running apt-get update (requires sudo)"
    sudo -E apt-get update -qq
  fi
}

check_prerequisites() {
  if ! command_exists apt-get; then
    echo_stderr "Only works on Debian-like systems"
  fi

  if ! command_exists lsb_release || ! command_exists add-apt-repository; then
    echo "Installing add-apt-repository and lsb-release (requires sudo)"
    apt_update_once
    sudo -E apt-get install -qq --assume-yes --fix-broken --no-install-recommends software-properties-common lsb-release
  fi

  if ! lsb_release -ds | tail -n 1 | grep -iq debian; then
    echo_stderr "Warning: Things might break outside of Debian"
  fi
}

echo_stderr() {
  >&2 echo "${@}"
}

generate_completions() {
  mkdir -p "$HOME/.local/completion.d"

  if command_exists npm; then
    npm completion > "$HOME/.local/completion.d/npm_completion"
  fi

  if command_exists beet; then
    beet completion > "$HOME/.local/completion.d/beet_completion"
  fi

  if command_exists pipx; then
    register-python-argcomplete --shell bash pipx > "$HOME/.local/completion.d/pipx_completion"
  fi
}

increase_max_watchers() {
  declare -r conf_file_path="/etc/sysctl.d/20-increase-max-watchers.conf"
  declare -r max_watches="524288"

  if [ ! -f  "$conf_file_path" ]; then
    echo "Increasing max watchers (requires sudo)"
    echo "fs.inotify.max_user_watches=$max_watches" | \
      sudo tee &> /dev/null -a "$conf_file_path" && sudo sysctl -p
    echo "Max watchers set to $max_watches"
  fi
}

install_apt_packages() {
  declare apt_packages=$(grep -v "^#" "$dotfiles_path/scripts/apt-packages-headless")
  if [[ -z "${IS_HEADLESS:-}" ]]; then
    apt_packages=$(grep --no-filename -v "^#" "$dotfiles_path/scripts/apt-packages"*)
  fi

  apt_update_once

  echo "Ensuring apt packages installed (requires sudo)"
  echo $apt_packages | xargs --no-run-if-empty \
    sudo -E apt-get install -qq --assume-yes --fix-broken --no-install-recommends
  echo "Apt packages installed"
}

install_node_packages() {
  # Pick up `fnm`-provided paths on first run
  . "$HOME/.profile"

  echo "Installing global node packages"
  grep -v "^#" "$HOME/dotfiles/scripts/node-packages" | xargs --no-run-if-empty \
    npm install -g --fund false
  echo "Node packages installed"
}

install_python_packages() {
  declare -r venv_path="$HOME/.local/venv"

  echo "Installing global python packages"
  grep -v "^#" "$HOME/dotfiles/scripts/pipx-packages" | xargs --no-run-if-empty -L 1 pipx install --force
  echo "Python packages installed"

  if [[ ! -d "${venv_path}" ]]; then
    echo "Creating default venv"
    python3 -m venv "${venv_path}"
  fi

  . "${venv_path}/bin/activate"

  echo "Installing venv libraries"
  grep -v "^#" "$HOME/dotfiles/scripts/python-libraries" | xargs --no-run-if-empty "${venv_path}/bin/python" -m pip install --quiet --upgrade
  echo "venv libraries installed"
}

is_package_installed() {
  if dpkg-query -l "$1" | grep -q "^ii"; then
    return 0
  else
    return 1
  fi
}

lock_local_files() {
  if git rev-parse --is-inside-work-tree &> /dev/null; then
    for local_file in $(git ls-files | grep -e '\.local$'); do
      if ! git locked | grep --quiet --fixed-strings "$local_file"; then
        echo "Locking $local_file"
        git lock "$local_file"
      fi
    done
  else
    echo "Not in a git repo, skipping local file locking"
  fi
}

remove_default_dotfile() {
  declare -r filename=$1
  if [[ -f "$HOME/$filename" && ! -L "$HOME/$filename" ]]; then
    echo "Moving default $filename"
    mv "$HOME/$filename" "$HOME/original$filename"
  fi
}

set_default_applications() {
  if command_exists nvim && [[ -z $(update-alternatives --query editor | grep ^Value | grep nvim) ]]; then
    echo "Setting Neovim as default text editor (requires sudo)"
    sudo update-alternatives --install /usr/bin/editor editor "$(command -v nvim)" 60
  fi

  if command_exists alacritty && [[ -z $(update-alternatives --query x-terminal-emulator | grep ^Value | grep alacritty) ]]; then
    echo "Setting Alacritty as default terminal (requires sudo)"
    sudo update-alternatives --set x-terminal-emulator "$(command -v alacritty)"
  fi

  if command_exists firefox-esr && [[ -z $(update-alternatives --query  x-www-browser | grep ^Value | grep firefox) ]]; then
    echo "Setting Firefox as default browser (requires sudo)"
    sudo update-alternatives --set x-www-browser "$(command -v firefox-esr)"
    xdg-settings set default-web-browser firefox-esr.desktop
  fi

  if command_exists yarnpkg && [[ -z $(update-alternatives --query yarn | grep ^Value | grep yarnpkg) ]]; then
    echo "Setting 'yarn' as system alias to 'yarnpkg' (requires sudo)"
    sudo update-alternatives --install /usr/bin/yarn yarn /usr/bin/yarnpkg 10
  fi
}

set_dotfiles_remote() {
  (
    cd "$HOME/dotfiles"
    if git remote get-url "$(git remote)" | grep -q https; then
      echo "Setting dotfiles git remote"
      git remote set-url origin git@github.com:fortes/dotfiles.git
    fi
  )
}

setup_backports() {
  declare -r codename="$(lsb_release -cs | tail -n 1)"

  # WSL comes with backports pre-enabled
  if grep -q "${codename}-backports" /etc/apt/sources.list{,.d/*} 2> /dev/null; then
    echo "Backports already in sources.list"
    return
  fi

  declare -r sources_path="/etc/apt/sources.list.d/backports.list"

  echo "${codename}-backports not in sources.list, adding (requires sudo)"
  echo "deb http://ftp.debian.org/debian ${codename}-backports main contrib non-free non-free-firmware" | \
    sudo tee &> /dev/null "$sources_path"

  # New source requires forced updates
  has_updated=""
}

setup_docker() {
  if ! is_package_installed docker.io; then
    apt_update_once
    echo "Installing docker (requires sudo)"
    sudo -E apt-get install -qq --assume-yes --fix-broken --no-install-recommends docker.io
  fi

  declare -r user="$(whoami)"
  declare -r sudoers_file="/etc/sudoers.d/${user}-docker"
  if [ ! -f "$sudoers_file" ]; then
    echo "Allowing $user to run docker without sudo prompt (requires sudo)"
    echo "$user ALL=(ALL) NOPASSWD: /usr/bin/docker" |
      sudo tee &> /dev/null "$sudoers_file"
    echo "$user ALL=(ALL) NOPASSWD: $HOME/.local/bin/docker-compose" |
      sudo tee -a &> /dev/null "$sudoers_file"
  fi
}

setup_keyboard() {
  if [[ ! -f /etc/default/keyboard ]]; then
    # Crostini / WSL don't have this
    return 0
  fi

  if ! grep -q "ctrl:nocaps" /etc/default/keyboard; then
    echo "Mapping Caps Lock to Control (requires sudo)"
    sudo sed -i.bak 's/^XKBOPTIONS=""/XKBOPTIONS="altwin:left_meta_win,ctrl:nocaps"/' /etc/default/keyboard

    if is_package_installed console-setup; then
      sudo dpkg-reconfigure -phigh console-setup
    fi
  fi
}

setup_locale() {
  declare -r locale="en_US.UTF-8"

  if ! is_package_installed locales; then
    apt_update_once

    echo "Installing locales package (requires sudo)"
    sudo -E apt-get install -qq --assume-yes --fix-broken --no-install-recommends locales
  fi

  if ! locale | grep -q "LANG=${locale}"; then
    echo "Generating locale ${locale} (requires sudo)"
    # Uncomment from `locale.gen` file
    sudo sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
    echo "Setting locale to ${locale}"
    sudo sudo -E dpkg-reconfigure --frontend=noninteractive locales && \
      sudo -E update-locale LANG=${locale}
    sudo debconf-set-selections -c <<< "locales locales/default_environment_locale select ${locale}"
  fi
}

setup_nonfree() {
  if [[ -f /etc/apt/sources.list.d/debian.sources ]]; then
    if grep -q non-free /etc/apt/sources.list.d/debian.sources; then
      echo "Non-free already in sources.list"
      return
    fi

    # `add-apt-repository` doesn't seem to support the deb822 format
    # TODO: Find a better way to do this
    sudo sed -i.bak 's/Components: main$/Components: main contrib non-free non-free-firmware/' \
      /etc/apt/sources.list.d/debian.sources
  elif ! grep -q non-free /etc/apt/sources.list; then
    # Assume contrib and non-free always travel together
    echo "Adding contrib & non-free to sources (requires sudo)"
    sudo -E add-apt-repository --no-update --yes contrib > /dev/null
    sudo -E add-apt-repository --no-update --yes non-free > /dev/null
    sudo -E add-apt-repository --no-update --yes non-free-firmware > /dev/null

    # New source requires forced updates
    has_updated=""
  fi
}

setup_shell() {
  declare -r bash_path="$(which bash)"
  declare -r current_shell="$(getent passwd "$(id -un)" | awk -F : '{print $NF}')"

  if [[ "${current_shell}" != "${bash_path}" ]]; then
    echo "Changing shell to bash (requires sudo)"
    sudo chsh -s "${bash_path}" "$(whoami)"
  fi
}

main() {
  # Make sure to load `command_exists` helper
  # shellcheck source=/dev/null
  . "$HOME/dotfiles/stowed-files/bash/.profile"

  declare -r dotfiles_path="$HOME/dotfiles"
  declare -r local_profile_path="$HOME/.profile.local"

  declare apt_only=''
  declare node_only=''
  declare python_only=''

  # Parse arguments
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --apt-only)
        apt_only=1
        ;;
      --node-only)
        node_only=1
        ;;
      --python-only)
        python_only=1
        ;;
      --help)
        usage
        exit 0
        ;;
      *)
        echo_stderr "Unknown argument: $1"
        usage
        exit 1
        ;;
    esac
    shift
  done

  if [[ -n "${apt_only}" ]]; then
    install_apt_packages
    exit 0
  elif [[ -n "${node_only}" ]]; then
    install_node_packages
    exit 0
  elif [[ -n "${python_only}" ]]; then
    install_python_packages
    exit 0
  fi

  check_prerequisites
  setup_shell
  set_dotfiles_remote

  if [[ ! -f "${local_profile_path}" ]]; then
    echo "Generating ${local_profile_path}"
    "${dotfiles_path}/scripts/create_local_profile" > "${local_profile_path}"
  fi

  # shellcheck source=/dev/null
  . "${local_profile_path}"

  setup_nonfree
  setup_backports
  install_apt_packages
  "${dotfiles_path}/scripts/setup_1password"
  [[ -z "${IS_DOCKER:-}" ]] && "${dotfiles_path}/scripts/setup_et"
  "${dotfiles_path}/scripts/setup_github_packages"

  # Debian ships with these two by default
  remove_default_dotfile .bashrc
  remove_default_dotfile .profile

  "${dotfiles_path}/scripts/stow"

  # Misc system configs
  increase_max_watchers
  pushd "${dotfiles_path}" > /dev/null
  lock_local_files
  popd > /dev/null
  set_default_applications
  [[ -z "${IS_DOCKER:-}" ]] && setup_docker
  setup_keyboard
  setup_locale

  # Non-apt package managers
  install_node_packages
  install_python_packages

  generate_completions

  echo "Setup complete!"

  # TODO:
  # - tailscale / wireguard
  # - chrome / steam / wine / others that require custom stuff
}

main "${@}"
