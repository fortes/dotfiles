#!/usr/bin/env bash
# Install some specific packages directly from GitHub. Specifically:
#
# - agg (asciinema gif generator)
# - deno
# - docker-compose
# - foliate (on non-headless only)
# - github cli
# - fnm
# - hugo
# - neovim (latest)
# - sad
# - yq
#
# Usage `install_github_packages`

set -euo pipefail
IFS=$'\n\t'
export DEBIAN_FRONTEND=noninteractive

echo_stderr() {
  >&2 echo "${@}"
}

get_latest_release_url() {
  local repo="$1"
  local match="$2"

  local release_json_url="https://api.github.com/repos/${repo}/releases/latest"
  curl --silent "${release_json_url}" | jq -r '.assets[]?.browser_download_url' | grep "${match}" | head -n 1
}

install_agg() {
  local url
  url="$(get_latest_release_url 'asciinema/agg' 'agg-x86_64-unknown-linux-musl')"
  if [[ -z "${url}" ]]; then
    echo_stderr "Could not find url"
    exit 2
  fi
  local install_location="$HOME/.local/bin"
  mkdir -p "${install_location}"
  echo -n "Downloading agg ... "
  wget --quiet -O "${install_location}/agg" "${url}"
  chmod +x "${install_location}/agg"
  echo "agg installed"
}

install_deno() {
  local url
  url="$(get_latest_release_url 'denoland/deno' 'deno-x86_64-unknown-linux-gnu.zip')"
  if [[ -z "${url}" ]]; then
    echo_stderr "Could not find url"
    exit 2
  fi
  echo -n "Downloading deno ... "
  local install_location="$HOME/.local/bin"
  mkdir -p "${install_location}"
  pushd /tmp > /dev/null
  wget --quiet -O "/tmp/deno.zip" "${url}"
  unzip -q -o -d "${install_location}" /tmp/deno.zip
  rm /tmp/deno.zip
  popd > /dev/null
  chmod +x "${install_location}/deno"
  echo "deno installed"
  echo "Generating deno bash completion"
  mkdir -p "$HOME/.local/completion.d"
  "${install_location}"/deno completions bash > "$HOME/.local/completion.d/deno_completion"
}

install_docker_compose() {
  local url
  url="$(get_latest_release_url 'docker/compose' 'linux-x86_64')"
  if [[ -z "${url}" ]]; then
    echo_stderr "Could not find url"
    exit 2
  fi
  local install_location="$HOME/.local/bin"
  mkdir -p "${install_location}"
  echo -n "Downloading docker-compose ... "
  wget --quiet -O "${install_location}/docker-compose" "${url}"
  chmod +x "${install_location}/docker-compose"
  echo "docker-compose installed"
}

install_foliate() {
  local url
  url="$(get_latest_release_url 'johnfactotum/foliate' 'com.github.johnfactotum.foliate_.*_all.deb')"
  if [[ -z "${url}" ]]; then
    echo_stderr "Could not find url"
    exit 2
  fi
  pushd /tmp > /dev/null
  wget --quiet -O foliate.deb "${url}"
  echo "Installing foliate dependencies (requires sudo)"
  sudo apt-get install -qq --assume-yes --fix-broken --no-install-recommends \
    gjs gir1.2-webkit2-4.0
  echo "Installing foliate (requires sudo)"
  sudo dpkg -i foliate.deb
  rm foliate.deb
  popd > /dev/null
}

install_github_cli() {
  local url
  url="$(get_latest_release_url 'cli/cli' 'gh_.*_linux_amd64.deb')"
  if [[ -z "${url}" ]]; then
    echo_stderr "Could not find url"
    exit 2
  fi
  pushd /tmp > /dev/null
  wget --quiet -O github-cli.deb "${url}"
  echo -n "Installing GitHub CLI (requires sudo) ... "
  sudo dpkg -i github-cli.deb
  rm github-cli.deb
  popd > /dev/null
}

install_fnm() {
  local url
  url="$(get_latest_release_url 'Schniz/fnm' 'fnm-linux.zip')"

  if [[ -z "${url}" ]]; then
    echo_stderr "Could not find url"
    exit 2
  fi

  local bin_path
  bin_path="$HOME/.local/bin"

  pushd "$(mktemp -d)" > /dev/null
  echo -n "Downloading fnm.zip ... "
  wget --quiet -O fnm.zip "${url}"
  echo -n "unzipping ... "
  unzip -q "fnm.zip" -d .
  mv "./fnm" "${bin_path}/fnm"
  popd > /dev/null
  chmod u+x "${bin_path}/fnm"

  echo "fnm installed"
  echo -n "Generating completions ... "
  mkdir -p "$HOME/.local/completion.d"
  "${bin_path}/fnm" completions > "$HOME/.local/completion.d/fnm_completion"

  echo "Complete!"

  echo -n "Installing node LTS ... "
  "${bin_path}/fnm" install --lts

  echo "Setting node version to LTS"
  "${bin_path}/fnm" default lts-latest
}

install_helix() {
  local url
  url="$(get_latest_release_url 'helix-editor/helix' 'x86_64.AppImage')"
  if [[ -z "${url}" ]]; then
    echo_stderr "Could not find url"
    exit 2
  fi

  local install_location="$HOME/.local/bin"
  mkdir -p "${install_location}"
  echo -n "Downloading helix ... "
  wget --quiet -O "${install_location}/hx" "${url}"
  chmod +x "${install_location}/hx"
  echo "helix installed"
}

install_hugo() {
  local url
  url="$(get_latest_release_url 'gohugoio/hugo' 'hugo_extended_.*_linux-amd64.deb')"
  if [[ -z "${url}" ]]; then
    echo_stderr "Could not find url"
    exit 2
  fi
  pushd /tmp > /dev/null
  wget --quiet -O hugo.deb "${url}"
  echo "Installing hugo (requires sudo)"
  sudo dpkg -i hugo.deb
  rm hugo.deb
  echo "Generating hugo bash completion & man pages"
  mkdir -p "$HOME/.local/completion.d"
  hugo completion bash > "$HOME/.local/completion.d/hugo_completion"
  cd "$(mktemp -d)"
  hugo gen man
  local man_dir_path="$HOME/.local/share/man/man1"
  mkdir -p "${man_dir_path}"
  mv man/* "${man_dir_path}"
  popd > /dev/null
}

install_sad() {
  local url
  url="$(get_latest_release_url 'ms-jpq/sad' 'x86_64-unknown-linux-gnu.deb')"
  if [[ -z "${url}" ]]; then
    echo_stderr "Could not find url"
    exit 2
  fi
  pushd /tmp > /dev/null
  wget --quiet -O sad.deb "${url}"
  echo "Installing sad (requires sudo)"
  sudo dpkg -i sad.deb
  rm sad.deb
  popd > /dev/null
}

install_neovim_stable() {
  local vim_path="$HOME/.local/bin/nvim"

  echo -n "Installing neovim stable ... "
  mkdir -p "$(dirname ${vim_path})"
  wget "https://github.com/neovim/neovim/releases/download/stable/nvim.appimage" \
    --quiet --output-document "$vim_path"
  chmod +x "$vim_path"
  echo "neovim stable installed"

  if [[ -n "${IS_DOCKER:-}" ]]; then
    local vim_appimage_dir_path="$HOME/.local/appimages/nvim"
    echo "Expanding neovim AppImage"
    mkdir -p "${vim_appimage_dir_path}"
    (
      cd "${vim_appimage_dir_path}"
      mv "${vim_path}" .
      "${vim_appimage_dir_path}/nvim" --appimage-extract > /dev/null
      ln -s "${vim_appimage_dir_path}/squashfs-root/AppRun" "${vim_path}"
    )
  fi

  if [[ -d "$HOME/.local/share/nvim/lazy/lazy.nvim" ]]; then
    echo "Syncing plugins"
    "${vim_path}" --headless "+Lazy! sync" +qa
  else
    echo "Must manually launch Neovim to install plugins"
  fi

  echo "Setting neovim as default editor (requires sudo)"
  sudo update-alternatives --install /usr/bin/ex ex "${vim_path}" 110
  sudo update-alternatives --install /usr/bin/vi vi "${vim_path}" 110
  sudo update-alternatives --install /usr/bin/view view "${vim_path}" 110
  sudo update-alternatives --install /usr/bin/vim vim "${vim_path}" 110
  sudo update-alternatives --install /usr/bin/vimdiff vimdiff "${vim_path}" 110
}

install_yq() {
  local url
  url="$(get_latest_release_url 'mikefarah/yq' 'yq_linux_amd64')"
  if [[ -z "${url}" ]]; then
    echo_stderr "Could not find url"
    exit 2
  fi

  local install_location="$HOME/.local/bin"
  mkdir -p "${install_location}"
  echo -n "Downloading yq ... "
  wget --quiet -O "${install_location}/yq" "${url}"
  chmod +x "${install_location}/yq"
  echo "yq installed"
  echo "Generating yq bash completion"
  mkdir -p "$HOME/.local/completion.d"
  "${install_location}"/yq shell-completion bash > "$HOME/.local/completion.d/yq_completion"
}

main() {
  . "$HOME/.profile.local"

  install_agg
  install_deno
  install_docker_compose
  # TODO: Test on more machines
  # [[ -z "${IS_HEADLESS:-}" ]] && install_foliate
  install_github_cli
  install_fnm
  install_helix
  install_hugo
  install_neovim_stable
  install_sad
  install_yq
}

main
