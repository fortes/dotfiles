#!/usr/bin/env bash
# Install some specific packages directly from GitHub. Specifically:
#
# - agg (asciinema gif generator)
# - browsh
# - bun
# - ctop
# - delta
# - deno
# - difftastic
# - docker-compose
# - fnm
# - fx
# - github cli
# - helix
# - hugo
# - lazydocker
# - lazygit
# - neovim (latest)
# - pistol
# - sad
# - wezterm
# - yq
# - zellij
#
# Usage `install_github_packages [package_names...]`

set -euo pipefail
IFS=$'\n\t'
export DEBIAN_FRONTEND=noninteractive

declare dotfiles_root
dotfiles_root="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

AVAILABLE_PACKAGES=(
  agg
  browsh
  bun
  ctop
  delta
  deno
  difftastic
  docker-compose
  fnm
  fx
  # Bookworm tracking recent version already, can use apt
  # github_cli
  helix
  hugo
  lazydocker
  lazygit
  pistol
  neovim
  sad
  wezterm
  yq
  zellij
)

print_usage() {
  echo "Usage: ${0} [-h|--help] [-s|--sole-package]"
  echo
  echo "Install packages directly from GitHub. Available packages:"
  echo
  for package in "${AVAILABLE_PACKAGES[@]}"; do
    echo "- ${package}"
  done
  echo
  echo "Options:"
  echo "-h|--help: Show this message"
}

echo_stderr() {
  >&2 echo "${@}"
}

get_latest_release_url() {
  local repo="$1"
  local match="$2"
  local urls

  local release_json_url="https://api.github.com/repos/${repo}/releases/latest"
  urls=$(curl --silent "${release_json_url}" | jq -r '.assets[]?.browser_download_url' | grep "${match}")
  if [[ -z "${urls}" ]]; then
    echo_stderr "Error: Could not find url for ${repo} matching ${match}"
    exit 2
  fi
  echo "${urls}"| head -n 1
}

install_bin() {
  local repo="${1}"
  local match="${2}"
  local name="${3:-}"
  if [[ -z "${name}" ]]; then
    name="$(basename "${repo}")"
  fi

  local url
  url="$(get_latest_release_url "${repo}" "${match}")"

  local install_location="$HOME/.local/bin"
  mkdir -p "${install_location}"
  echo -n "Downloading ${name} ... "
  wget --quiet -O "${install_location}/${name}" "${url}"
  chmod 755 "${install_location}/${name}"
  echo "${name} installed"
}

install_deb() {
  local repo="${1}"
  local match="${2}"
  local name
  local download_dir

  name="$(basename "${repo}")"

  local url
  url="$(get_latest_release_url "${repo}" "${match}")"

  download_dir="$(mktemp --directory "${name}"XXX)"
  pushd "${download_dir}" > /dev/null
  wget --quiet -O "${name}.deb" "${url}"
  echo "Installing ${repo} (requires sudo) ... "
  sudo dpkg -i "${name}.deb"
  popd > /dev/null
  rm -rf "${download_dir}"
}

install_tarball() {
  local repo="${1}"
  local match="${2}"
  local name="${3:-}"
  if [[ -z "${name}" ]]; then
    name="$(basename "${repo}")"
  fi

  local url
  url="$(get_latest_release_url "${repo}" "${match}")"

  local install_location="$HOME/.local/bin"

  local download_dir
  download_dir="$(mktemp --directory "${name}"XXX)"

  pushd "${download_dir}" > /dev/null
  wget --quiet -O "${name}.tar.gz" "${url}"
  echo -n "Expanding ${name}.tar.gz ... "
  tar xzvf "${name}.tar.gz"> /dev/null
  mv "${name}" "${install_location}/${name}"
  chmod 755 "${install_location}/${name}"
  popd > /dev/null
  rm -rf "${download_dir}"
  echo "${name} installed"
}

install_zip() {
  local repo="${1}"
  local match="${2}"
  local name
  name="$(basename "${repo}")"

  local url
  url="$(get_latest_release_url "${repo}" "${match}")"

  local install_location="$HOME/.local/bin"

  local download_dir
  download_dir="$(mktemp --directory "${name}"XXX)"

  pushd "${download_dir}" > /dev/null
  wget --quiet -O "${name}.zip" "${url}"
  echo -n "Unzipping ${name}.zip ... "
  unzip -q -o -j -d "${install_location}" "${name}.zip"
  chmod 755 "${install_location}/${name}"
  popd > /dev/null
  rm -rf "${download_dir}"
  echo "${name} installed"
}

install_agg() {
  install_bin 'asciinema/agg' 'agg-x86_64-unknown-linux-musl'
}

install_browsh() {
  echo "Installing browsh dependencies (requires sudo)"
  sudo apt-get install -qq --assume-yes --fix-broken --no-install-recommends \
    firefox

  install_deb 'browsh-org/browsh' 'browsh_.*_linux_amd64.deb'
}

install_bun() {
  install_zip 'oven-sh/bun' 'bun-linux-x64-baseline.zip'
}

install_ctop() {
  install_bin 'bcicen/ctop' 'ctop-.*-linux-amd64'
}

install_delta() {
  install_deb 'dandavison/delta' 'git-delta_.*_amd64.deb'
}

install_deno() {
  install_zip 'denoland/deno' 'deno-x86_64-unknown-linux-gnu.zip'
}

install_difftastic() {
  install_tarball 'wilfred/difftastic' 'difft-x86_64-unknown-linux-gnu.tar.gz' 'difft'
}

install_docker_compose() {
  install_bin 'docker/compose' 'linux-x86_64' 'docker-compose'
}

install_github_cli() {
  install_deb 'cli/cli' 'gh_.*_linux_amd64.deb'
}

install_fnm() {
  install_zip 'Schniz/fnm' 'fnm-linux.zip'
}

install_fx() {
  install_bin 'antonmedv/fx' 'fx_linux_amd64'
}

install_helix() {
  local url
  url="$(get_latest_release_url 'helix-editor/helix' 'x86_64.AppImage')"
  local install_location="$HOME/.local/bin"
  mkdir -p "${install_location}"
  echo -n "Downloading helix ... "
  wget --quiet -O "${install_location}/hx" "${url}"
  chmod 755 "${install_location}/hx"
  echo "helix installed"
}

install_hugo() {
  install_deb 'gohugoio/hugo' 'hugo_extended_.*_linux-amd64.deb'
}

install_lazydocker() {
  install_tarball 'jesseduffield/lazydocker' 'lazydocker_.*_Linux_x86_64.tar.gz'
}

install_lazygit() {
  install_tarball 'jesseduffield/lazygit' 'lazygit_.*_Linux_x86_64.tar.gz'
}

install_sad() {
  install_deb 'ms-jpq/sad' 'x86_64-unknown-linux-gnu.deb'
}

install_neovim_stable() {
  local vim_path="$HOME/.local/bin/nvim"

  echo -n "Installing neovim stable ... "
  mkdir -p "$(dirname "${vim_path}")"
  wget "https://github.com/neovim/neovim/releases/download/stable/nvim.appimage" \
    --quiet --output-document "$vim_path"
  chmod +x "$vim_path"
  echo "neovim stable installed"

  if [[ -n "${IS_DOCKER:-}" ]]; then
    local vim_appimage_dir_path="$HOME/.local/appimages/nvim"
    echo "Expanding neovim AppImage"
    mkdir -p "${vim_appimage_dir_path}"
    (
      cd "${vim_appimage_dir_path}"
      mv "${vim_path}" .
      "${vim_appimage_dir_path}/nvim" --appimage-extract > /dev/null
      ln -s "${vim_appimage_dir_path}/squashfs-root/AppRun" "${vim_path}"
    )
  fi

  if [[ -d "$HOME/.local/share/nvim/lazy/lazy.nvim" ]]; then
    echo "Syncing plugins"
    "${vim_path}" --headless "+Lazy! sync" +qa
  else
    echo "Must manually launch Neovim to install plugins"
  fi

  echo "Setting neovim as default editor (requires sudo)"
  sudo update-alternatives --install /usr/bin/ex ex "${vim_path}" 110
  sudo update-alternatives --install /usr/bin/vi vi "${vim_path}" 110
  sudo update-alternatives --install /usr/bin/view view "${vim_path}" 110
  sudo update-alternatives --install /usr/bin/vim vim "${vim_path}" 110
  sudo update-alternatives --install /usr/bin/vimdiff vimdiff "${vim_path}" 110
}

install_pistol() {
  install_bin 'doronbehar/pistol' 'pistol-static-linux-x86_64'
}

install_wezterm() {
  install_deb 'wez/wezterm' 'wezterm-.*.Debian12.deb'
}

install_yq() {
  install_bin 'mikefarah/yq' 'yq_linux_amd64'
}

install_zellij() {
  install_tarball 'zellij-org/zellij' 'zellij-x86_64-unknown-linux-musl.tar.gz'
}

install_github_packages() {
  # Make sure to load `command_exists` helper
  # shellcheck source=../stowed-files/bash/.profile
  . "${dotfiles_root}/stowed-files/bash/.profile"

  if ! command_exists apt-get; then
    echo_stderr "Only works on Debian-like systems"
    exit 1
  fi

  local packages=("$@")
  if [ "${#packages[@]}" -eq 0 ]; then
    packages=("${AVAILABLE_PACKAGES[@]}")
  fi

  while (( "$#" )); do
    case "${1}" in
      -h|--help)
        print_usage
        exit 0
        ;;
    esac
    shift
  done

  # shellcheck source=/dev/null
  . "${HOME}/.profile.local"

  echo -n "Installing GitHub packages:"
  printf " %s" "${packages[@]}"
  echo

  for package in "${packages[@]}"; do
    case "${package}" in
      agg)
        install_agg
        ;;
      browsh)
        # Requries Firefox, may not be wanted on headless machines
        [[ -z "${IS_HEADLESS:-}" ]] && install_browsh
        ;;
      bun)
        install_bun
        ;;
      ctop)
        install_ctop
        ;;
      delta)
        install_delta
        ;;
      deno)
        install_deno
        ;;
      difftastic)
        install_difftastic
        ;;
      docker-compose)
        install_docker_compose
        ;;
      github-cli)
        install_github_cli
        ;;
      fnm)
        install_fnm
        ;;
      fx)
        install_fx
        ;;
      helix)
        install_helix
        ;;
      hugo)
        install_hugo
        ;;
      lazydocker)
        install_lazydocker
        ;;
      lazygit)
        install_lazygit
        ;;
      neovim)
        install_neovim_stable
        ;;
      pistol)
        install_pistol
        ;;
      sad)
        install_sad
        ;;
      wezterm)
        [[ -z "${IS_HEADLESS:-}" ]] && install_wezterm
        ;;
      yq)
        install_yq
        ;;
      zellij)
        install_zellij
        ;;
      *)
        echo_stderr "Error: Unrecognized package: ${package}"
        exit 1
        ;;
    esac
  done

  echo "GitHub packages installed!"
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  install_github_packages "${@}"
fi
